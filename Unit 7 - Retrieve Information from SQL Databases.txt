#########################################
#########################################
Unit 7 -- Retrieve Information from Structured Query Language (SQL) Databases
#########################################
#########################################



#########################################
Lesson 1
Database Structure
#########################################

----------------------------------------
The RDBMS Data Model
----------------------------------------
Relational databases allow you to track multiple, related sets of information
  much more cleanly than with spreadsheets


----------------------------------------
Schemas
----------------------------------------
Schemas are the road maps that tell you how the data fits together





----------------------------------------
Modeling Relations with Primary and Foreign Keys
----------------------------------------
Every row in a table must be unique -- the uniqueness is enforced by a primary key

The id field doesn't need to be random or sequential -- you could use a combo of fields




#########################################
Lesson 2
Populating a Database
#########################################


----------------------------------------
Opening a Sqlite Session
----------------------------------------
sqlite3 can be initiated by typing sqlite3 into a terminal session

navigate to the location you want to create a database in first

touch DATABASE NAME.db -- creates an empty database
    this is done outside of sqlite3
sqlite3 DATABASE NAME.db -- connects to the database through SQLite

.exit -- exits out of the program

.tables -- lists all tables that are in the current database
.open FILENAME -- opens the indicated database file

--General Syntax--
CREATE TABLE "TABLE NAME" (
    id INTEGER PRIMARY KEY,
    "COLUMN NAME" "DATATYPE",
    "REFERENCED COLUMN NAME" "DATATYPE" REFERENCES "REFERENCED TABLE(COLUMN)"
    . . . );

)



----------------------------------------
Manually Entering Data
----------------------------------------
you can enter any number of rows by using the command INSERT INTO tablename VALUES

entering a value for an entire row will be placed in the column based on the order
    the data is entered

INSERT INTO tablename VALUES
  (NUMBER, 'STRING', ... );


.headers ON -- turns on column headers in the returned table
.mode column -- separates the return table into columns

-- Entering Incomplete Rows --
if some of the values are missing, you need to specify the values you do have

INSERT INTO tablename(columnA, columnC, ... )
  (columnA value, columnC value, ... )

to add multiple values at once, separate the rows with commas -- the final item ends with a semicolon

if you add a value of the wrong data type, sqlite3 will convert it
    if you enter a year into a string value, it will be converted to a string

the safest way to remove a row is by its ID

DELETE FROM "TABLE NAME"
  WHERE id="VALUE TO DELETE"



----------------------------------------
Loading Data from a SQL File
----------------------------------------
you can download a .sql file and load it into the database to easily populate tables

.read SQL FILE NAME.SQL




#########################################
Lesson 3
Writing Simple Queries
#########################################

----------------------------------------
Selecting Columns from a Table
----------------------------------------
you can enter the names of the columns you'd like returned in the SELECT statement



----------------------------------------
Selecting Rows from a Table Using WHERE
----------------------------------------
adding a WHERE clause helps limits rows that return a TRUE value for the WHERE clause



-- Equality and Inequality --
all standard comparison operators can be used

BETWEEN X AND Y -- can be used instead of a combination of >= and <=




-- IN --
IN(a, b, c, ...) -- can be used to specify a list of possible values




-- Pattern Matching --
to search for matching patterns in strings, use LIKE

_ -- acts as a wildcard for a single character
    SELECT name, state FROM customers
      WHERE name LIKE 'Pe_';

      returns all values that begin with 'Pe' and have a single character after

% -- acts as a wildcard to any number of characters
    SELECT name, state FROM customers
      WHERE name LIKE 'P%';

      returns all values that begin with a 'P'

you can string together multiple _'s to allow for two wildcard characters
    can also use a combination of _ and % in a single statement

SELECT name, state FROM customers
  WHERE name LIKE '__i%'

  returns all values that have two characters before an 'i' and any number of characters
      (or none at all) after the 'i'




-- String Functions --
strings can be manipulated -- this can be helpful for WHERE statements (lower case comparison)

SELECT id, name FROM products
  WHERE lower(name) LIKE '%razor%';

can view the result of replace a value in a string with the REPLACE function

SELECT REPLACE(name, 'n', 'x') FROM customers;

    returns all values in the name column and replaces any 'n' values with an 'x'




-- Order By --
ORDER BY -- allows you to control how the columns in a table are sorted (or returned)

SELECT id, name, state FROM customers
  ORDER BY state;

  returns all id, name, and state values ordered by state

you can order by a column even if that column does not appear

the default order is ascending (ASC) -- you can append DESC (descending) after the column
    to sort in descending order (high to low)
