##############################
##############################
Day 5 Class Notes
Pandas
##############################
##############################

import pandas as pd
    ^^^ standard, just as numpy is aliased as np

building dataframes in pandas
pd.DataFrame()
pd.DataFrame([{'a': 1, 'b': 2, 'c': 3}
            ,{'a': 4, 'b': 5, 'c': 6, 'd': 7}])

numpy is included in the pandas package
    can leverage the np alias without explicitly importing numpy

%ls data -- returns all data files within the current working directory

can specify the delimiter in the pd.read_csv() function
    pd.read_csv(FILE, delimiter=';')

can save a data frame as a variable

can return the data types of the data frame variable with the .dtypes function
    df.dtypes




--------------------------------------
--------------------------------------
DataFrame Methods

df.columns -- yields all of the column names in the dataframe

df.index -- yields the range of indexes, or range of rows in a dataframe

can define strings for the index as opposed to the numerical values

could pull a unique value from a column to use as the index for a row
    would leverage df.set_index("COLUMN NAME")
    this method creates a new data frame that is stored in memory
        would need to use the inplace option to redefine the variable

can slice and index pandas in similar ways to lists and arrays
    df['citric acid'] -- returns all values from the citric acid column

can use stats on a series object
    df.min()
    df.max()
    df.mean()
    df.std()
    df.sem()

df.describe() -- provides a summary of the object
    includes count, mean, std, min, percentiles, and max

can return values from a series object via indexing
    ca.describe()['min'] -- returns the value associated with the min key

df.head() -- returns the top 5 rows
df.tail() -- returns the bottom 5 rows
    can pass a value into either function to return X rows

can obtain a dataframe with certain columns
    df[['citric acid', 'chlorides', 'density']]

can sub-select a row and view it as a series object
    df.loc[1591] --  returns a series object for the row id 1591
    returns all columns and their related value
    if there are multiple data types, the return is casted into the lowest common demoninator
        the data type would then be an object

can avoid converting an index of a single row to a series by asking for a range of 1 value
    the output would then be a new dataframe
    df.loc[1591:1591]

df.dropna() -- drops all rows that have an NA value in any column

df.fillna() -- replaces the NA value with a specified value
    df.fillna(-1) -- replaces NA with -1

can built a function that is passed to a dataframe to alter the values
    df.apply(FUNCTION, axis=AXISNUMBER)

import gc
gc.collect()
    ^^^^ cleans up the rows that do not have a reference associated with them

can call describe on the entire data frame to get a summary of each column
    can slice the values within the describe() method

label based slicing

dataframes are mutable data structures

can leverage the replace() function to correct column headers that have spaces
    best practice to have column headers without spaces

can select specific rows within columns
    df.loc[6, 'chlorides'] -- returns the element in row #6 in the chlorides column

can easily add a column to a dataframe
    df['NEW COLUMN NAME'] = OPERATION TO PERFORM TO SET VALUE
--------------------------------------
--------------------------------------






--------------------------------------
--------------------------------------
Group By Statements

use .unique() to obtain a list of the unique values within a column
    df['quality'].unique()

can perform operations on groupby statements
    df.groupby('quality').mean() -- returns the mean values of each column grouped together by the quality column
--------------------------------------
--------------------------------------






--------------------------------------
--------------------------------------
Pandas Homework
Lesson 5 - Assignment from Github Repository
--------------------------------------
--------------------------------------
