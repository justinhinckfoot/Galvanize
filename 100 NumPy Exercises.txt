############################
100 NumPy Exercises Notes
############################

---------------------------------------------------------------------
To can view a function's docstring text from the command line
    python -c "import numpy; numpy.info(numpy.FUNCTION)"
---------------------------------------------------------------------



---------------------------------------------------------------------
To reverse a NumPy array, leveraging the indexing
    Z = np.arange(10)
    Z[::-1]
---------------------------------------------------------------------



---------------------------------------------------------------------
To return the index of non-zero values in an array
    nz = np.nonzero([1,2,0,0,4,0])
    print(nz)

nonzero -- return the indices of the elements that are non-zero
---------------------------------------------------------------------



---------------------------------------------------------------------
Identity Array
numpy.identity() -- returns the identity array
    the identity array is a square array with ones on the main diagonal

numpy.identity(n, dtype=None)
    n: int -- number of rows (and columns)
    dtype: data-type, optional -- data-type of the output
---------------------------------------------------------------------



---------------------------------------------------------------------
Random Array
numpy.random.ran() -- generates a random array of values

numpy.random.rand(d0, d1, ..., dn)
    d0, d1, ..., dn: int, optional -- specify the dimensions of the returned array
---------------------------------------------------------------------




---------------------------------------------------------------------
Returning the Minimum and/or Maximum Values from an Array
numpy.amin(ARRAY) -- returns the minimum value from an array
numpy.amax(ARRAY) -- returns the maximum value from an array
---------------------------------------------------------------------




---------------------------------------------------------------------
Create a random vector of size X
numpy.random.randint() -- returns a random array

numpy.random.randint(l, h, s)
    l: int -- lowest signed integer to be drawn from in the distribution
    h: int, optional -- if provided, the highest integer to be drawn from in the distribution
    s: int, optional -- specifies the size of the returned array
---------------------------------------------------------------------




---------------------------------------------------------------------
Convert a String or Number to Floating Point
numpy.nan() -- converts the designated value to a floating point number

numpy.nan(x)
    x: str, int -- converts to a floating point number
---------------------------------------------------------------------





---------------------------------------------------------------------
Extract or Create a Diagonal Array
numpy.diag() -- extracta diagonal or constructs a diagonal array

numpy.diag(v, k=0)
    v: array_like
    k: int, optional -- diagonal in question
        - use k > 0 for diagonals above the main diagonal
        - use k < 0 for diagonals below the main diagonal
---------------------------------------------------------------------





---------------------------------------------------------------------
Converting an Index to a Tuple of Coordinates (Index Unravelingw)
numpy.unravel_index() -- converts a flat index or array of flat indices into
    a tuple of coordinate arrays

numpy.unravel_index(indices, dims, order='C')
    indices: array_like -- an integer array whose elements are indices into
          the flattened version of an array of dimensions
    dims: tuple of ints -- the shape of the array to use for unraveling
    order: {'C','F'}, optional -- determines whether the indices should
          be viewed as indexing in row-major (C-style) or column-major (Fortran-style)
---------------------------------------------------------------------





---------------------------------------------------------------------
The Tile FUNCTION
numpy.tile() -- construct an array by repeating A the number of times given by reps

numpy.tile(A, reps)
    A: array_like -- the input array
    reps: array_like -- the number of repetitions of A along each axis
---------------------------------------------------------------------





---------------------------------------------------------------------
Creating Custom Data Types
A data type object (numpy.dtype) describes how the bytes in the fixed-size block
of memory corresponding to an array item should be interpreted

It describes the following aspects of the data:
  1. Type of data
  2. Size of the data
  3. Byte order of the data
  4. If the data type is structured, an aggregate of other data types
  5. If the data type is a sub-array, what is its shape and data type
---------------------------------------------------------------------





---------------------------------------------------------------------
How to Draw Samples from a Uniform Distribution
numpy.random.uniform() -- draws samples from a uniform distribution

numpy.random.uniform(low, high, size)
    low: float or array_like of floats, optional -- lower boundary of the output interval
        all values generated will be greater than or equal to low
        default value is 0
    high: float or array_like of floats -- upper boundary of the output interval
        all values generated will be less than high
        default value is 1.0
    size: int or tuple of ints, operations -- output shape
---------------------------------------------------------------------





---------------------------------------------------------------------
How to Round Down to Zero vs. Up
numpy.trunc() -- returns the truncated value of the input, element-wise

the truncated value of the scalar is the nearest integer i which is closer to zero than x is

numpy.trunc(x)
    x: array_like -- the data to truncate
---------------------------------------------------------------------





---------------------------------------------------------------------
How to Copy the Sign from One Element to Another
numpy.copysign() -- changes the sign of x1 and applies it to x2, element-wise

numpy.copysign(x1, x2)
    x1: array_like -- values to change the sign of
    x2: array_like -- the sign of each element that is applied to the respective
          element under x1
---------------------------------------------------------------------





---------------------------------------------------------------------
Floor Function
numpy.floor() -- returns the floor of the input, element-wise

numpy.floor(x):
    x: array_like -- an array of input data

Examples
a = np.array([-1.7, -1.5, -0.2, 0.2, 1.5, 1.7, 2.0])
np.floor(a)
array([-2., -2., -1., 0., 1., 1., 2.])
---------------------------------------------------------------------





---------------------------------------------------------------------
Ceiling Function
numpy.ceil() -- returns the ceiling of the input, element-wise

numpy.ceil(x):
    x: array_like -- an array of input data

Examples
a = np.array([-1.7, -1.5, -0.2, 0.2, 1.5, 1.7, 2.0])
np.ceil(a)
array([-1., -1., -0., 1., 2., 2., 2.])
---------------------------------------------------------------------






---------------------------------------------------------------------
Trunc Function
numpy.trunc() -- returns the truncated value of the input, element-wise

the truncated value of the scalar is the nearest integer which is closer to zero than the scalar

numpy.trunc(x)
    x: array_like -- input data to truncate

Examples
a = np.array([-1.7, -1.5, -0.2, 0.2, 1.5, 1.7, 2.0])
np.trunc(a)
array([-1., -1., -0., 1., 1., 1., 2.])
---------------------------------------------------------------------
